plugins {
	id 'io.spring.dependency-management' version "${spring_plugin_version}"
	id 'org.springframework.boot' version "${spring_boot_version}"
    id 'org.sonarqube' version "${sonarqube_plugin_version}"
	id 'java'
	id 'java-library'
	id 'maven-publish'
	id 'signing'
 	id 'jacoco'
	id "org.owasp.dependencycheck" version "5.3.1"
	id "com.github.node-gradle.node" version "2.2.0"
    id "com.adarshr.test-logger" version "3.0.0"
}

ext {
	sonarProjectKey = "savantly-net_superset-module"
}

apply plugin: "io.freefair.lombok"
apply from: "${rootProject.projectDir}/gradle/sonar.gradle"
apply from: "${rootProject.projectDir}/gradle/sonatype.gradle"

archivesBaseName = name
description = "Superset charts on the Sprout Platform"
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenLocal()
	mavenCentral()
	gradlePluginPortal()
	maven { url "https://repo.spring.io/plugins-release" }
	maven {
		url = uri('https://oss.sonatype.org/content/repositories/snapshots/')
	}
}

task stage(dependsOn: ['build'])

node {
    version = '12.18.3'
    download = true
}

yarn_build {
    inputs.files fileTree("src/plugin")
    inputs.file 'package.json'
    inputs.file 'yarn.lock'
    inputs.file 'tsconfig.json'
    inputs.file 'src/plugin.json'
    inputs.file 'src/module.ts'
    outputs.dir 'dist'
}

task copyPublicfiles(type: Copy) {
    from "$buildDir/../dist"
    into "$buildDir/resources/main/public/api/plugins/superset"
    outputs.upToDateWhen { false }
}
yarn_build.dependsOn yarn
copyPublicfiles.dependsOn yarn_build
classes.dependsOn copyPublicfiles

sourceSets {
    dev {
        java {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
            srcDirs += ['src/dev/java', 'src/dev/resources']
        }
    }
}

// run `./gradlew :fm-module:bootRun -Psuspend=y` to suspend for debugger connection
def suspend = project.ext.properties.suspend
if(!suspend) {
	suspend = 'n'
}
bootRun {
	main = 'example.DevApplication'
    classpath = sourceSets.dev.runtimeClasspath
    jvmArgs=[
  	  "-agentlib:jdwp=transport=dt_socket,server=y,suspend=$suspend,address=18080"
    ]
}

bootJar {
    enabled = false
}

jar {
    enabled = true
	exclude("**/application-*.yml")
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

dependencyCheck {
	analyzers {
		nodeEnabled=false
	}
}

testlogger {
    showFailedStandardStreams true
}

configurations {
	all {
		exclude group: 'com.h2database'
	}
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

dependencies {
    
	api "net.savantly.sprout:sprout-core:${sproutVersion}",
	"net.savantly.sprout:sprout-spring-boot-starter:${sproutVersion}"
		
	api 'org.freemarker:freemarker',
		'com.vladmihalcea:hibernate-types-52:2.10.0'
	
	compileOnly 'org.projectlombok:lombok',
		'javax.interceptor:javax.interceptor-api:1.2',
		'javax.validation:validation-api:2.0.1.Final',
		'org.projectlombok:lombok:1.18.12'

    annotationProcessor 'org.projectlombok:lombok',
        'org.springframework.boot:spring-boot-configuration-processor'
        
    developmentOnly "org.springframework.boot:spring-boot-devtools",
		'org.postgresql:postgresql'
    
    testImplementation "org.testcontainers:postgresql:1.15.3"
    
    testImplementation "net.savantly.sprout:sprout-module-test:${sproutVersion}"
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation "org.testcontainers:junit-jupiter:1.15.3"
	
	testImplementation "org.junit.jupiter:junit-jupiter-engine",
		"org.junit.platform:junit-platform-launcher"
	
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

gradle.taskGraph.whenReady {
	taskGraph ->
	if (taskGraph.hasTask(stage)) {
		test.enabled = false
	}
}

dependencyManagement {
	imports {
		mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
	}
}

clean {
    delete 'dist'
    delete 'build'
}
